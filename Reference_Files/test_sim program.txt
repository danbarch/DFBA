


test_sim<-function(dfba_sim=rep(0,13)){
## This function does 13 tests for the dfba_sim_data() function.
# The function takes no input, so it can be called as a part of the
# the automated tests of the functions in the DFBA package. 
# The function will be called by the main testing program for
# whole DFBA package. That function would have the command of
# test_sim() along with 13 other commands to test the 14 functions
# in the DFBA package.
## The test-sim() function returns a vector of 13 values for 
# 13 independent tests of the dfba_sim_data() function. If a
# test passes, then the output value component of the output
# vector is 0, but if the test fails, then the component value
# is a 1. Thus for the dfba_sim_data() function to pass all 13
# tests, the output vector which is called dfba_sim is a vector
# of 13 zeros. If all components of the dfba_sim vector are
# are not zero, then dfba_vec components with a 1 identify which
# specific tests that are problematic.
## Test 1 evaluates if the prH1 value for the normal model
# with an independent design is correct. If the function is 
# working for the case with n=450, delta=.4, and block.max=0,
# then prH1 should be greater than .72347. Test 2 evaluates if
# the pvalue for classical t test for this same case is working,
# which occurs if the pvalue is less than .13385.
## Tests 3 and 4 are respectively the tests for the case for
# prH1 and the t pvalue for the normal, n=600, design=paired
# block.max=0. Test 5 examines the mean of the output C values  
# generated by the dfba_sim_data() program when block.max=16, for the
# normal distribution with n=600. If the dfba_sim_data() function is
# working then the control C values should have a mean near 8.0. The 
# absolute value deviation from 8 should be less than 1.264. 
## Tests 6 thru 11 examines the output values for the control condition
# data with R square goodness-of-fit tests for following 6 distributions 
# respectively: exponential, weibull, logistic, gumbel, cauchy, and 
# pareto. The decision criterion for each GOF test was empirically
# found so that random fluctions did not cause an R squared to be
# that low in the more than 800,000 cases examined. Yet if any of 
# models were misspecified then the criterion was almost certain 
# to detect it. For example, if dfba_sim_data() were should be
# produces a Weibull data with a shape parameter of .8 but in 
# reality it produced Weibull dats with a shape parameter of 
# say 1.6, then the goodness-of-fit test would almost certainly
# detect this failure.
## The above six distributions could employ goodness-of-fit (GOF)
# tests to check the functioning of the dfba_sim_data() function but
# for the chi square and lognormal distribution a GOF test could not
# be evaluated in this fashion because the cumulative distribution 
# function is not available in closed form. So, to test the chi square
# and the lognormal distributions, the test examine if the output 
# scores in the control condition location. For the chi square
# test the correct mean for the control should be near 10 
# The chi square is test number 12. Test 13 evaluates the median of
# of the lognormal, which should be near the value of 1. As with the
# other tests, the decision criterion limits were empirically 
# established.

  dfba_sim=rep(0,13)
  Tsim1<-dfba_sim_data(n=450,model="normal",design="independent",delta=.4,block.max=0)
  if (Tsim1$prH1<.72347){dfba_sim[1]=1}
  if (Tsim1$pvalue>.13385){dfba_sim[2]=1}
  Tsim2<-dfba_sim_data(n=600,model="normal",design="paired",delta=.4,block.max=0)
  if (Tsim2$prH1<.933){dfba_sim[3]=1}
  if (Tsim2$pvalue >.069){dfba_sim[4]=1}
  Tsim3<-dfba_sim_data(n=600,model="normal",design="independent",delta=.4,block.max=16)
  blocktest=abs(mean(Tsim3$C)-8.000)
  if (blocktest>1.264){dfba_sim[5]=1}
  Aexpf<-dfba_sim_data(n=600,model="exponential",design="paired",delta=.4,block.max=0)
  Cw=Aexpf$C
  Cwor=sort(Cw)
  Uact=1-exp(-Cwor)
  Upred=(seq(1,600,1))/600
  Rsq=(cor(Uact,Upred,method="pearson"))^2
  if (Rsq<.9645){dfba_sim[6]=1}
Awf<-dfba_sim_data(n=600,model="weibull",design="paired",delta=.4,shape1=.8,shape2=.8)
shape1=.8
Cw2=Awf$C
Cwor2=sort(Cw2)
Uact2=1-exp(-Cwor2^shape1)
Upred2=(seq(1,600,1))/600
Rsqw=(cor(Uact2,Upred2,method="pearson"))^2
if (Rsqw<.969){dfba_sim[7]=1}

Alogis<-dfba_sim_data(n=600,model="logistic",design="paired",delta=.4,shape1=.551,shape2=.551)
shape1=.551
Cw=Alogis$C
Cwor=sort(Cw)
Uact=1/(1+exp(-(Cwor/shape1)))
Upred=(seq(1,600,1))/600
logisttest=(cor(Uact,Upred,method="pearson"))^2
if (logisttest<.9794){dfba_sim[8]=1}

Agum<-dfba_sim_data(n=600,model="gumbel",design="paired",delta=.4,shape1=1,shape2=1)
Cw=Agum$C
Cwor=sort(Cw)
Uact=exp(-exp(-Cwor))
Upred=(seq(1,600,1))/600
gumtest=(cor(Uact,Upred,method="pearson"))^2
if (gumtest<.9785){dfba_sim[9]=1}

Acauchy<-dfba_sim_data(n=600,model="cauchy",design="paired",delta=.4,shape1=1,shape2=1)
shape1=1
Cw=Acauchy$C
Cwor=sort(Cw)
Uact=.5+atan(Cwor/shape1)
Upred=(seq(1,600,1))/600
cauchytest=(cor(Uact,Upred,method="pearson"))^2
if (cauchytest<.9765){dfba_sim[10]=1}

Apareto<-dfba_sim_data(n=600,model="pareto",design="paired",delta=.4,shape1=1,shape2=1)
shape1=1
alpha1=1.16*shape1
Cw=Apareto$C
Cwor=sort(Cw)
Uact=1-(1/(Cwor^alpha1))
Upred=(seq(1,600,1))/600
cauchytest=(cor(Uact,Upred,method="pearson"))^2
if (cauchytest<.9693719){dfba_sim[11]=1}


D<-dfba_sim_data(n=600,model="chisquare",design="paired",delta=.4,shape1=10,shape2=10)
chisqtest=abs(mean(D$C)-10.00)
if (chisqtest>1.0694){dfba_sim[12]=1}

Dlogn<-dfba_sim_data(n=2000,model="lognormal",design="paired",delta=.4,shape1=1,shape2=1)
lognormtest=abs(median(Dlogn$C)-1.000)
if (lognormtest>.23024){dfba_sim[13]=1}

failtot4=sum(dfba_sim)
    if (failtot4==0){
      cat("dfba_sim_data passes", " ","\n") } else {
        cat("dfba_sim_data fails. There are","\n")
        cat(failtot4," failed subtests of the function.","\n")
        }

dfba_sim_list=list(dfba_sim=dfba_sim)

}



