dfba_beta_contrast {DFBA}				R Documentation

Testing a Contrast of K≥2 Independent Binomial Variables

Description

This function implements a Bayesian analysis of a linear contrast
of conditions when there are K≥2 independent conditions and where
the variate for each condition is a binomial. Since the Bayesian 
analysis for each separate condition has a posterior beta 
distribution with known shape parameters, the program approximates,
via Monte Carlo sampling, a linear contrast among the set of 
independent beta distributions because the contrast of beta 
distributions is not a known probability model.


Usage

dfba_beta_contrast(
  n1_vec,
  n2_vec,
  contrast_vec,
  a0_vec = rep(1,length(a_vec)),
  b0_vec = rep(1,length(a_vec)),
  samples = 10000
 )


Arguments

n1_vec		A vector of length K that consists of the 
		observed number of successes for the 
		categorical variable in each of the K separate
		conditions
	 
		

n2_vec		A vector of length K that consists of the
		observed number of failures for the 
		categorical variable in each of the K separate
		conditions

contrast_vec	A vector of coefficients of a linear comparison
		among the conditions where the sum of all the
		coefficient must be 0 and the sum of the positive
		coefficients must be 1 and the sum of the 
		negative coefficients must be -1  

a0_vec		A vector of length K that consists of the prior
		a0 shape parameters for the separate betas (the
		default values are 1)

b0_vec		A vector of length K that consists of the prior
		b0 shape parameters for the separate betas (the
		default values are 1)

prob_interval	The probability within the equal-tail limits for
		the contrast (the default is .95)

samples		The number of Monte Carlo samples randomly taken
		from each posterior beta variate (the default is 
		10000)

Details

Given a binomial categorical variate for each of K independent 
conditions with K≥2, the standard frequentist nonparametric 
analysis is to do a chi square test with K-1 degrees of freedom
(Siegel & Castellan, 1988). Hypothesis testing for the 
frequentist chi square test assesses the sharp-null hypothesis 
that the binomial success rate is exacty equal in all the 
conditions. But this point-null hypothesis is not an interesting
question about the population success rate from a Bayesian
viewpoint because the probability of any single point hypothesis 
has a probability measure value of zero. Although it is possible 
that the frequentist null hypothesis can be retained for small
n studies, the hypothesis itself is about the population in the  
case of unlimited sample size, and surely for this limiting case 
it is almost certain that the hypothesis is not exactly true.
So from the Bayesian framework, the point-null hypothesis is not
a good use of scientific effort and resources. From a Bayesian 
framework it is more scientifically meaningful to assess a linear
comparison of the conditions, such as to assess if the population
success rate in condition 2 is greater than the success rate in  
condition 1. An interval hypothesis such as this has a meaningful 
probability value as does the complimentary hypothesis. If phi_1
and phi_2 are respectively the population success rates for the 
binomials in conditions 1 and 2, then a meaningful comparison 
might be to assess the probability distribution for 
delta=phi_2-phi_1. This example is a simple linear contrast with
contrast coefficient weights of -1 and 1, which are tbe 
multipliers for the two population success rates. If the 
posterior interval estimate for the contrast contains 0, then the 
hypothesis of a delta=0 has some credibility in light of the
current sample size. Thus by estimating the distribution of 
delta the user learns important information about condition
differences. As another example of a contrast, suppose there are
three conditions where the first condition is a standard control,
and the other two conditions are different alternative conditions. 
In this case a user might want to compare the control versus the
average of the two experimental conditions, i.e., the contrast of
delta = -1*phi_1 +.5*phi_2 + .5*phi_3. In this second example the 
coefficients of the contrast are: -1,+.5,+.5. As a third example, 
the user might also be interested in a comparison where the two 
experimental conditions are compared, i.e., the contrast of 
delta = 0*phi_1 + 1*phi_2 -1*phi_3. For the dfba_beta_contrast() 
function, the user is required to stipulate the coefficients of 
a contrast such that the sum of all the coefficients is 0, the 
sum of the positive coefficients is 1, and the sum of the negative
coefficients is -1. This constraint on the coefficients forces 
delta to be on the [-1,+1] interval.   


There is a standard Bayesian posterior for each condition, which
is a beta distribution; see Chechile (2020) for a detailed 
discussion of this literature. In short, it is well known that
the beta distribution is a natural Bayesian conjugate function
for Bernoulli random processes. Thus a prior beta distribution 
with shape parameters a0 and b0 result (via Bayes theorem) in a
posterior beta with shape parameters `a' and `b' where a=a0+n1 
and b=b0+n2, where n1 and n2 are the respective successes and 
failures of the categorical variable. While the Bayesian analysis
of each beta distribution for the separate conditions are known, 
a comparison among 2 or more separate beta distributions is not 
distributed as a beta. The posterior mean of a linear contrast
of separate beta variates has a known mean regardless of the 
correlations among the variates, but the distributional form of
the contrast of independent betas is not known in closed form. 
The distributional form is important for ascertaining issues 
such as determining the probability that the contrast is positive
or specifying a probability interval for the contrast. But with 
the dfba_beta_contrast () function, these important aspects of 
the Bayesian analysis are approximated via Monte Carlo simulation
of the contrast. 

The input `samples' stipulates the number of random values that 
will be drawn from each of the K posterior conditions. The default 
value for `samples' is 10000, but the user can adjust this quantity
upperward. The Monte Carlo sampling is quite rapid, so the program
requires at least the default value of 10000, but the user might 
desire to increase the value for `samples' if increased precision is
desired. Posterior interval estimation and the Bayes factor for 
the contrast are provided on the basis of the Monte Carlo
sampling. If `samples' is equal to N and if phi_1, ..., phi_K 
are the parameters for the population success rates, then there 
are N random values drawn from each of phi_i parameters for 
i=1,...,K. Given the contrast coeficients stipulated in the input, 
there are N delta random posterior values where
delta[i]=contrast_vec[1]*phi_1[i]+...+contrast_vec[K]*phi_K[i].
The Monte Carlo sampling from each posterior beta with known 
shape parameters uses the base R rbeta command. Thus unlike
Bayesian procedures that employ Markov chain Monte Carlo algorithm,
the Monte Carlo sampling in the dfba_beta_contrast () program 
does not depend on a burn-in process or a starting estimate because
it is not a MCMC procedure. Thus all the N sampled values are valid
random samples. Of course repeated use of the dfba_beta_contrast ()
function for the same input will show some random variation in the
interval estimate and in the Bayes factor for a contrast greater 
than 0. However, the point estimate for the contrast does not depend
on the Monte Carlo samplng, and it is constant given the vectors for
n1_vec and n2_vec and given the same prior.

Values

A list containing the following components:

mean		Exact posterior mean estimate for the contrast

lower_limit	The lower equal-tail limit for the contrast for
		the probability interval value stipulated by 
		the prob_interval input

upper_limit	The upper equal-tail limit for the contrast for
		the probability interval value stipulated by
		the prob_interval input

bayes_factor	The Bayes factor for the posterior-to-prior 
		odds for a positive contrast to a non-positive
		contrast

delta_quantiles	The 101 quantile values for the posterior 
		contrast from the Monte Carlo sampling that go
		from 0 to 1 in steps of .01
		
a_vec		A vector of length K that consists of the 
		posterior `a' shape parameters for the separate
		posterior beta distributions

b_vec		A vector of length K that consists of the 
		posterior `b' shape parameters for the separate
		posterior beta distributions

a0_vec		A vector of length K that consists of the 
		prior a0 shape parameters for the separate
		prior beta distributions

b0_vec		A vector of length K that consists of the 
		prior b0 shape parameters for the separate
		prior beta distributions

contrast_vec	A vector for the contrast coefficients for a
		linear comparison of posterior beta variates 

prob_interval	The probability for the equal-tail estimate
		for the contrast

samples		The number of Monte Carlo samples from the 
		K separate posterior beta distributions	


References

Chechile, R. A. (2020). Bayesian Statistics for Experimental
Scientists: A General Introduction Using Distribution-Free
Methods. Cambridge: MIT Press.

Siegel, S. & Castellan, N. J. (1988). Nonparametric 
Statistics for the Behavioral Sciences. New York: McGraw Hill.

Examples

## Suppose there are four conditions from a factorial design
# where the conditions labels are A1B1, A2B1, A1B2, and A2B2
# where the frequencies for success for the binomial variate are:
n1_vec<-c(22,15,13,21)
# and the frequencies for failures per condition are:
n2_vec<-c(18,25,27,19)
# Let us test the following three orthogonal contrasts
contrast.B1vsB2<-c(.5,.5,-.5,-.5)
contrast.A1vsA2<-c(.5,-.5,.5,-.5)
contrast.ABinter<-c(.5,-.5,-.5,.5)
testB1vsB2<-dfba_beta_contrast(n1_vec=n1_vec,n2_vec=n2_vec,contrast_vec=contrast.B1vsB2)
testA1vsA2<-dfba_beta_contrast(n1_vec,n2_vec,contrast_vec=contrast.A1vsA2)
testABinteraction<-dfba_beta_contrast(n1_vec,n2_vec,contrast_vec=contrast.ABinter)

# Suppose the user wants to plot the cumulative distribution for
# AB interaction contrast from above then
xv=seq(0,1,.01)
plot(testABinteraction$delta_quantiles,xv,type="l",ylab="cum. prob.",xlab="contrast value")



		