plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability Density")
} else {
opar<-par(no.readonly=TRUE)
par(mar=c(4.1, 4.1, 4.1, 4.1), xpd=TRUE)
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability Density")
lines(x.phi,
dbeta(x.phi, a.prior, b.prior),
lty=2)
legend("top",
inset = c(0, -0.25),
legend=c("Posterior",
"Prior"),
lty=c(1, 2),
xpd=TRUE,
horiz=TRUE)
on.exit(par(opar))
}
}
x<-c("A", "B", "C", "D", "E")
cut(x, 2)
x<-rep(c("A", "B", "C", "D", "E"), 3)
unname(table(x))
table(x)
y<-rep(c("F", "G", "H", "I", "J"), 3)
table(x, y)
#' @export
dfba_gamma<-function(x,
y=NULL,
quantiles_x=NULL,
quantiles_y=NULL,
a.prior=1,
b.prior=1,
hdi.width=0.95){
if(is.matrix(x)==TRUE){
table<-x
} else {
if(length(x)!=length(y)){
stop("x and y must have equal length")
}
#conditional for categorical/scale data
if(is.numeric(x)){
x_cut<-cut(x, quantiles_x)
} else {
x_cut<-x
}
if(is.numeric(y)){
y_cut<-cut(y, quantiles_y)
} else {
y_cut<-y
}
table<-(table(x_cut, y_cut))
x<-rep(1:nrow(table), unname(rowSums(table)))
y<-rep(as.vector(t(col(table))), as.vector(t(table)))
}
dfba_gamma_list<-list(gamma=dfba_phi(x, y, a.prior, b.prior, hdi.width)$tau,
a.prior=a.prior,
b.prior=b.prior,
sample.p=dfba_phi(x, y, a.prior, b.prior, hdi.width)$sample.p,
alpha=dfba_phi(x, y, a.prior, b.prior, hdi.width)$alpha,
beta=dfba_phi(x, y, a.prior, b.prior, hdi.width)$beta,
hdi.width=hdi.width,
post.median=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.median,
post.hdi.lower=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.lower,
post.hdi.upper=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.upper)
new("dfba_gamma_out", dfba_gamma_list)
}
dfba_gamma(1:10, 5:14)
dfba_gamma(1:10, 5:14, 2, 2)
#' @export
dfba_gamma<-function(x,
y=NULL,
quantiles_x=NULL,
quantiles_y=NULL,
a.prior=1,
b.prior=1,
hdi.width=0.95){
if(is.matrix(x)==TRUE){
table<-x
} else {
if(length(x)!=length(y)){
stop("x and y must have equal length")
}
#conditional for categorical/scale data
if(is.numeric(x)){
if(is.null(quantiles_x)){
stop("Quantiles of x must be specified when x is numeric")
}
x_cut<-cut(x, quantiles_x)
} else {
x_cut<-x
}
if(is.numeric(y)){
if(is.null(quantiles_y)){
stop("Quantiles of y must be specified when y is numeric")
}
y_cut<-cut(y, quantiles_y)
} else {
y_cut<-y
}
table<-(table(x_cut, y_cut))
x<-rep(1:nrow(table), unname(rowSums(table)))
y<-rep(as.vector(t(col(table))), as.vector(t(table)))
}
dfba_gamma_list<-list(gamma=dfba_phi(x, y, a.prior, b.prior, hdi.width)$tau,
a.prior=a.prior,
b.prior=b.prior,
sample.p=dfba_phi(x, y, a.prior, b.prior, hdi.width)$sample.p,
alpha=dfba_phi(x, y, a.prior, b.prior, hdi.width)$alpha,
beta=dfba_phi(x, y, a.prior, b.prior, hdi.width)$beta,
hdi.width=hdi.width,
post.median=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.median,
post.hdi.lower=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.lower,
post.hdi.upper=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.upper)
new("dfba_gamma_out", dfba_gamma_list)
}
#' @export
dfba_gamma<-function(x,
y=NULL,
quantiles_x=NULL,
quantiles_y=NULL,
a.prior=1,
b.prior=1,
hdi.width=0.95){
if(is.matrix(x)==TRUE){
table<-x
} else {
if(length(x)!=length(y)){
stop("x and y must have equal length")
}
#conditional for categorical/scale data
if(is.numeric(x)){
if(is.null(quantiles_x)){
stop("Quantiles of x must be specified when x is numeric")
}
x_cut<-cut(x, quantiles_x)
} else {
x_cut<-x
}
if(is.numeric(y)){
if(is.null(quantiles_y)){
stop("Quantiles of y must be specified when y is numeric")
}
y_cut<-cut(y, quantiles_y)
} else {
y_cut<-y
}
table<-(table(x_cut, y_cut))
x<-rep(1:nrow(table), unname(rowSums(table)))
y<-rep(as.vector(t(col(table))), as.vector(t(table)))
}
dfba_gamma_list<-list(gamma=dfba_phi(x, y, a.prior, b.prior, hdi.width)$tau,
a.prior=a.prior,
b.prior=b.prior,
sample.p=dfba_phi(x, y, a.prior, b.prior, hdi.width)$sample.p,
alpha=dfba_phi(x, y, a.prior, b.prior, hdi.width)$alpha,
beta=dfba_phi(x, y, a.prior, b.prior, hdi.width)$beta,
hdi.width=hdi.width,
post.median=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.median,
post.hdi.lower=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.lower,
post.hdi.upper=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.upper)
new("dfba_gamma_out", dfba_gamma_list)
}
dfba_gamma(1:10, 5:14)
#' @export
dfba_gamma<-function(x,
y=NULL,
quantiles_x=NULL,
quantiles_y=NULL,
a.prior=1,
b.prior=1,
hdi.width=0.95){
if(is.matrix(x)==TRUE){
table<-x
} else {
if(length(x)!=length(y)){
stop("x and y must have equal length")
}
if((is.numeric(x)&is.null(quantiles_x))|
is.numeric(y)&is.null(quantiles_y)){
stop("quantiles must be specified for numeric data vectors")
}
#conditional for categorical/scale data
if(is.numeric(x)){
x_cut<-cut(x, quantiles_x)
} else {
x_cut<-x
}
if(is.numeric(y)){
y_cut<-cut(y, quantiles_y)
} else {
y_cut<-y
}
table<-(table(x_cut, y_cut))
x<-rep(1:nrow(table), unname(rowSums(table)))
y<-rep(as.vector(t(col(table))), as.vector(t(table)))
}
dfba_gamma_list<-list(gamma=dfba_phi(x, y, a.prior, b.prior, hdi.width)$tau,
a.prior=a.prior,
b.prior=b.prior,
sample.p=dfba_phi(x, y, a.prior, b.prior, hdi.width)$sample.p,
alpha=dfba_phi(x, y, a.prior, b.prior, hdi.width)$alpha,
beta=dfba_phi(x, y, a.prior, b.prior, hdi.width)$beta,
hdi.width=hdi.width,
post.median=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.median,
post.hdi.lower=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.lower,
post.hdi.upper=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.upper)
new("dfba_gamma_out", dfba_gamma_list)
}
dfba_gamma(1:10, 5:14)
dfba_gamma(1:10, 5:14, 2, 2)
x<-c("A", "A", "A", "B", "B", "B", "B", "B", "C", "F")
length(x)
y<-c("A", "B", "B", "B", "C", "C", "D", "B", "C", "F")
y<-c("A", "B", "B", "B", "C", "C", "D", "B", "C")
dfba_gamma(x, y)
y<-c("A", "B", "B", "B", "C", "C", "D", "B", "C", "F")
dfba_gamma(x, y)
#' @export
setMethod("show", "dfba_phi_out", function(object) {
cat("Descriptive Statistics \n")
cat("========================\n")
cat(" ", "Concordant Pairs", "\t", "Discordant Pairs", "\n")
cat(" ", object$nc, "\t\t\t", object$nd, "\n")
cat(" ", "Proportion of Concordant Pairs", "\n")
cat(" ", object$sample.p, "\n")
cat("\nFrequentist Analyses\n")
cat("========================\n")
cat("  ", "Tau point estimate\n")
cat("  ", object$tau, "\n")
cat(" ", object$hdi.width*100, "% Confidence Interval", "\n", sep="")
cat(" ", "CI to be added\n")
cat("\nBayesian Analyses\n")
cat("========================\n")
cat(" ", "Beta Shape Parameters\n")
cat(" ", "Alpha", "\t\t", "Beta\n")
cat(" ", object$alpha, "\t\t", object$beta, "\n")
cat(" ", "Posterior Median\n")
cat(" ", object$post.median, "\n")
cat(" ", object$interval.width*100, "% Equal-tail Interval\n", sep="")
cat(" ", "Lower Limit", "\t\t", "Upper Limit\n")
cat(" ", object$post.eti.lower, "\t\t", object$post.eti.upper, "\n")
})
# Formatted output for dfba_phi when fitting parameters are specified in options
#' @export
setMethod("show", "dfba_phi_star_out", function(object) {
cat("Descriptive Statistics \n")
cat("========================\n")
cat(" ", "Concordant Pairs", "\t", "Discordant Pairs", "\n")
cat(" ", object$nc, "\t\t\t", object$nd, "\n")
cat(" ", "Proportion of Concordant Pairs", "\n")
cat(" ", object$sample.p, "\n")
cat("\nFrequentist Analyses\n")
cat("========================\n")
cat("  ", "Tau point estimate\n")
cat("  ", object$tau, "\n")
cat(" ", object$hdi.width*100, "% Confidence Interval", "\n", sep="")
cat(" ", "CI to be added\n")
cat("\nBayesian Analyses\n")
cat("========================\n")
cat(" ", "Beta Shape Parameters\n")
cat(" ", "Alpha", "\t\t", "Beta\n")
cat(" ", object$alpha, "\t\t", object$beta, "\n")
cat(" ", "Posterior Median\n")
cat(" ", object$post.median, "\n")
cat(" ", object$interval.width*100, "% Equal-tail Interval\n", sep="")
cat(" ", "Lower Limit", "\t\t", "Upper Limit\n")
cat(" ", object$post.eti.lower, "\t\t", object$post.eti.upper, "\n")
cat("\nAdjusted for number of model-fitting parameters\n")
cat("------------------------\n")
cat(" ", "Beta Shape Parameters\n")
cat(" ", "Alpha", "\t\t", "Beta\n")
cat(" ", object$alpha_star, "\t\t", object$beta_star, "\n")
cat(" ", "Posterior Median\n")
cat(" ", object$post.median_star, "\n")
cat(" ", object$interval.width*100, "% Equal-tail Interval\n", sep="")
cat(" ", "Lower Limit", "\t\t", "Upper Limit\n")
cat(" ", object$post.eti.lower_star, "\t\t", object$post.eti.upper_star, "\n")
})
# Plot posterior and prior (optional) for dfba_phi
# To call plots, use plot(dfba_phi())
#' @export
setMethod("plot",
signature("dfba_phi_out"),
function(x, plot.prior=FALSE){
dfba_plot_beta(x$alpha,
x$beta,
x$a.prior,
x$b.prior,
plot.prior)
})
# Plot posterior and prior (optional) for dfba_phi when
# fitting parameters are specified in options
# To call plots, use plot(dfba_phi())
#' @export
setMethod("plot",
signature("dfba_phi_star_out"),
function(x, plot.prior=FALSE){
dfba_plot_beta(x$alpha_star,
x$beta_star,
x$a.prior,
x$b.prior,
plot.prior)
})
#' @export
setMethod("show", "dfba_gamma_out", function(object) {
cat("Descriptive Statistics \n")
cat("========================\n")
cat(" ", "Concordant Pairs", "\t", "Discordant Pairs", "\n")
cat(" ", object$nc, "\t\t\t", object$nd, "\n")
cat(" ", "Proportion of Concordant Pairs", "\n")
cat(" ", object$sample.p, "\n")
cat("\nFrequentist Analyses\n")
cat("========================\n")
cat("  ", "Goodman-Kruskal Gamma\n")
cat("  ", object$gamma, "\n")
cat("\nBayesian Analyses\n")
cat("========================\n")
cat(" ", "Beta Shape Parameters\n")
cat(" ", "Alpha", "\t", "Beta\n")
cat(" ", object$alpha, "\t\t", object$beta, "\n")
cat(" ", "Posterior Median\n")
cat(" ", object$post.median, "\n")
cat(" ", object$interval.width*100, "% Equal-tail Interval\n", sep="")
cat(" ", "Lower Limit", "\t\t", "Upper Limit\n")
cat(" ", object$post.eti.lower, "\t\t", object$post.eti.upper)
})
#' @export
setMethod("plot",
signature("dfba_gamma_out"),
function(x, plot.prior=FALSE){
dfba_plot_beta(x$alpha,
x$beta,
x$a.prior,
x$b.prior,
plot.prior)
})
dfba_gamma(x, y)
#' @export
setMethod("show", "dfba_gamma_out", function(object) {
cat("Descriptive Statistics \n")
cat("========================\n")
cat(" ", "Concordant Pairs", "\t", "Discordant Pairs", "\n")
cat(" ", object$nc, "\t\t\t", object$nd, "\n")
cat(" ", "Proportion of Concordant Pairs", "\n")
cat(" ", object$sample.p, "\n")
cat("  ", "Goodman-Kruskal Gamma\n")
cat("  ", object$gamma, "\n")
cat("\nBayesian Analyses\n")
cat("========================\n")
cat(" ", "Beta Shape Parameters\n")
cat(" ", "Alpha", "\t", "Beta\n")
cat(" ", object$alpha, "\t\t", object$beta, "\n")
cat(" ", "Posterior Median\n")
cat(" ", object$post.median, "\n")
cat(" ", object$interval.width*100, "% Equal-tail Interval\n", sep="")
cat(" ", "Lower Limit", "\t\t", "Upper Limit\n")
cat(" ", object$post.eti.lower, "\t\t", object$post.eti.upper)
})
#' @export
dfba_gamma<-function(x,
y=NULL,
quantiles_x=NULL,
quantiles_y=NULL,
a.prior=1,
b.prior=1,
hdi.width=0.95){
if(is.matrix(x)==TRUE){
table<-x
} else {
if(length(x)!=length(y)){
stop("x and y must have equal length")
}
if((is.numeric(x)&is.null(quantiles_x))|
is.numeric(y)&is.null(quantiles_y)){
stop("quantiles must be specified for numeric data vectors")
}
#conditional for categorical/scale data
if(is.numeric(x)){
x_cut<-cut(x, quantiles_x)
} else {
x_cut<-x
}
if(is.numeric(y)){
y_cut<-cut(y, quantiles_y)
} else {
y_cut<-y
}
table<-(table(x_cut, y_cut))
x<-rep(1:nrow(table), unname(rowSums(table)))
y<-rep(as.vector(t(col(table))), as.vector(t(table)))
}
dfba_gamma_list<-list(gamma=dfba_phi(x, y, a.prior, b.prior, hdi.width)$tau,
a.prior=a.prior,
b.prior=b.prior,
sample.p=dfba_phi(x, y, a.prior, b.prior, hdi.width)$sample.p,
nc=dfba_phi(x, y, a.prior, b.prior, hdi.width)$nc,
nd=dfba_phi(x, y, a.prior, b.prior, hdi.width)$nd,
alpha=dfba_phi(x, y, a.prior, b.prior, hdi.width)$alpha,
beta=dfba_phi(x, y, a.prior, b.prior, hdi.width)$beta,
hdi.width=hdi.width,
post.median=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.median,
post.hdi.lower=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.lower,
post.hdi.upper=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.upper)
new("dfba_gamma_out", dfba_gamma_list)
}
dfba_gamma(x, y)
#' @export
dfba_gamma<-function(x,
y=NULL,
quantiles_x=NULL,
quantiles_y=NULL,
a.prior=1,
b.prior=1,
hdi.width=0.95){
if(is.matrix(x)==TRUE){
table<-x
} else {
if(length(x)!=length(y)){
stop("x and y must have equal length")
}
if((is.numeric(x)&is.null(quantiles_x))|
is.numeric(y)&is.null(quantiles_y)){
stop("quantiles must be specified for numeric data vectors")
}
#conditional for categorical/scale data
if(is.numeric(x)){
x_cut<-cut(x, quantiles_x)
} else {
x_cut<-x
}
if(is.numeric(y)){
y_cut<-cut(y, quantiles_y)
} else {
y_cut<-y
}
table<-(table(x_cut, y_cut))
x<-rep(1:nrow(table), unname(rowSums(table)))
y<-rep(as.vector(t(col(table))), as.vector(t(table)))
}
dfba_gamma_list<-list(gamma=dfba_phi(x, y, a.prior, b.prior, hdi.width)$tau,
a.prior=a.prior,
b.prior=b.prior,
sample.p=dfba_phi(x, y, a.prior, b.prior, hdi.width)$sample.p,
nc=dfba_phi(x, y, a.prior, b.prior, hdi.width)$nc,
nd=dfba_phi(x, y, a.prior, b.prior, hdi.width)$nd,
alpha=dfba_phi(x, y, a.prior, b.prior, hdi.width)$alpha,
beta=dfba_phi(x, y, a.prior, b.prior, hdi.width)$beta,
hdi.width=hdi.width,
post.median=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.median,
post.eti.lower=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.eti.lower,
post.eti.upper=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.eti.upper)
new("dfba_gamma_out", dfba_gamma_list)
}
dfba_gamma(x, y)
#' @export
setMethod("show", "dfba_gamma_out", function(object) {
cat("Descriptive Statistics \n")
cat("========================\n")
cat(" ", "Concordant Pairs", "\t", "Discordant Pairs", "\n")
cat(" ", object$nc, "\t\t\t", object$nd, "\n")
cat(" ", "Proportion of Concordant Pairs", "\n")
cat(" ", object$sample.p, "\n")
cat(" ", "Goodman-Kruskal Gamma\n")
cat("  ", object$gamma, "\n")
cat("\nBayesian Analyses\n")
cat("========================\n")
cat(" ", "Beta Shape Parameters\n")
cat(" ", "Alpha", "\t", "Beta\n")
cat(" ", object$alpha, "\t\t", object$beta, "\n")
cat(" ", "Posterior Median\n")
cat(" ", object$post.median, "\n")
cat(" ", object$interval.width*100, "% Equal-tail Interval\n", sep="")
cat(" ", "Lower Limit", "\t\t", "Upper Limit\n")
cat(" ", object$post.eti.lower, "\t\t", object$post.eti.upper)
})
dfba_gamma(x, y)
#' @export
setMethod("show", "dfba_gamma_out", function(object) {
cat("Descriptive Statistics \n")
cat("========================\n")
cat(" ", "Concordant Pairs", "\t", "Discordant Pairs", "\n")
cat(" ", object$nc, "\t\t\t", object$nd, "\n")
cat(" ", "Proportion of Concordant Pairs", "\n")
cat(" ", object$sample.p, "\n")
cat(" ", "Goodman-Kruskal Gamma\n")
cat(" ", object$gamma, "\n")
cat("\nBayesian Analyses\n")
cat("========================\n")
cat(" ", "Beta Shape Parameters\n")
cat(" ", "Alpha", "\t", "Beta\n")
cat(" ", object$alpha, "\t\t", object$beta, "\n")
cat(" ", "Posterior Median\n")
cat(" ", object$post.median, "\n")
cat(" ", object$interval.width*100, "% Equal-tail Interval\n", sep="")
cat(" ", "Lower Limit", "\t\t", "Upper Limit\n")
cat(" ", object$post.eti.lower, "\t\t", object$post.eti.upper)
})
dfba_gamma(x, y)
devtools::document()
rm(list = c("dfba_gamma", "dfba_phi", "dfba_plot_beta", "Vec_to_table"))
rm(list = c("dfba_gamma", "dfba_phi", "dfba_plot_beta"))
devtools::document()
devtools::document()
devtools::document()
