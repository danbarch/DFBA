function(x){
})
setMethod("plot",
signature("dfba_gamma_out"),
function(x, plot.prior=FALSE){
dfba_plot_beta(x$alpha, x$beta, x$a.prior, x$b.prior, plot.prior)
})
Table_to_vec<-function(table){
x<-rep(1:nrow(table), unname(rowSums(table)))
y<-rep(as.vector(t(col(table))), as.vector(t(table)))
list(x=x,
y=y)
}
dfba_gamma<-function(x, y=NULL, quantiles_x=NULL, quantiles_y=NULL, a.prior=1, b.prior=1, hdi.width=0.95){
if(is.matrix(x)==TRUE){
table<-x
} else {
if(length(x)!=length(y)){
stop("x and y must have equal length")
}
table<-Vec_to_table(x, y, quantiles_x, quantiles_y)
x<-Table_to_vec(table)$x
y<-Table_to_vec(table)$y
}
dfba_gamma_list<-list(gamma=dfba_phi(x, y, a.prior, b.prior, hdi.width)$tau,
sample.p=dfba_phi(x, y, a.prior, b.prior, hdi.width)$sample.p,
alpha=dfba_phi(x, y, a.prior, b.prior, hdi.width)$alpha,
beta=dfba_phi(x, y, a.prior, b.prior, hdi.width)$beta,
hdi.width=hdi.width,
post.median=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.median,
post.hdi.lower=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.lower,
post.hdi.upper=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.upper)
new("dfba_gamma_out", dfba_gamma_list)
}
dfba_gamma<-function(x, y=NULL, quantiles_x=NULL, quantiles_y=NULL, a.prior=1, b.prior=1, hdi.width=0.95){
if(is.matrix(x)==TRUE){
table<-x
} else {
if(length(x)!=length(y)){
stop("x and y must have equal length")
}
table<-Vec_to_table(x, y, quantiles_x, quantiles_y)
x<-Table_to_vec(table)$x
y<-Table_to_vec(table)$y
}
dfba_gamma_list<-list(gamma=dfba_phi(x, y, a.prior, b.prior, hdi.width)$tau,
a.prior=a.prior,
b.prior-b.prior,
sample.p=dfba_phi(x, y, a.prior, b.prior, hdi.width)$sample.p,
alpha=dfba_phi(x, y, a.prior, b.prior, hdi.width)$alpha,
beta=dfba_phi(x, y, a.prior, b.prior, hdi.width)$beta,
hdi.width=hdi.width,
post.median=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.median,
post.hdi.lower=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.lower,
post.hdi.upper=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.upper)
new("dfba_gamma_out", dfba_gamma_list)
}
dfba_gamma(1:10, 5:14, quantiles_x=2, quantiles_y=2)
plot(dfba_gamma(1:10, 5:14, quantiles_x=2, quantiles_y=2))
dfba_plot_beta<-function(a.post, b.post, a.prior=NULL, b.prior=NULL, plot.prior=FALSE){
x.phi<-seq(0, 1, 1/1000)
y.phi<-dbeta(x.phi, a.post, b.post)
if (plot.prior==TRUE){
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Posterior Probability")
} else {
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability")
lines(x.phi,
dbeta(x.phi, a.prior, b.prior),
lty=2)
legend("bottom",
legend=c("Posterior",
"Prior"),
lty=c(1, 2))
}
}
setMethod("plot",
signature("dfba_gamma_out"),
function(x, plot.prior=FALSE){
dfba_plot_beta(x$alpha, x$beta, x$a.prior, x$b.prior, plot.prior)
})
Table_to_vec<-function(table){
x<-rep(1:nrow(table), unname(rowSums(table)))
y<-rep(as.vector(t(col(table))), as.vector(t(table)))
list(x=x,
y=y)
}
dfba_gamma<-function(x, y=NULL, quantiles_x=NULL, quantiles_y=NULL, a.prior=1, b.prior=1, hdi.width=0.95){
if(is.matrix(x)==TRUE){
table<-x
} else {
if(length(x)!=length(y)){
stop("x and y must have equal length")
}
table<-Vec_to_table(x, y, quantiles_x, quantiles_y)
x<-Table_to_vec(table)$x
y<-Table_to_vec(table)$y
}
dfba_gamma_list<-list(gamma=dfba_phi(x, y, a.prior, b.prior, hdi.width)$tau,
a.prior=a.prior,
b.prior-b.prior,
sample.p=dfba_phi(x, y, a.prior, b.prior, hdi.width)$sample.p,
alpha=dfba_phi(x, y, a.prior, b.prior, hdi.width)$alpha,
beta=dfba_phi(x, y, a.prior, b.prior, hdi.width)$beta,
hdi.width=hdi.width,
post.median=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.median,
post.hdi.lower=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.lower,
post.hdi.upper=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.upper)
new("dfba_gamma_out", dfba_gamma_list)
}
plot(dfba_gamma(1:10, 5:14, quantiles_x=2, quantiles_y=2))
a.post=3
b.post=4
x.phi<-seq(0, 1, 1/1000)
y.phi<-dbeta(x.phi, a.post, b.post)
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Posterior Probability")
dfba_plot_beta<-function(a.post, b.post, a.prior=NULL, b.prior=NULL, plot.prior=FALSE){
x.phi<-seq(0, 1, 1/1000)
y.phi<-dbeta(x.phi, a.post, b.post)
if (plot.prior==TRUE){
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Posterior Probability")
} else {
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability")
lines(x.phi,
dbeta(x.phi, a.prior, b.prior),
lty=2)
legend("bottom",
legend=c("Posterior",
"Prior"),
lty=c(1, 2))
}
}
dfba_plot_beta(3, 4, 1, 1, plot.prior=TRUE)
dfba_plot_beta<-function(a.post, b.post, a.prior=NULL, b.prior=NULL, plot.prior=FALSE){
x.phi<-seq(0, 1, 1/1000)
y.phi<-dbeta(x.phi, a.post, b.post)
if (plot.prior==FALSE){
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Posterior Probability")
} else {
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability")
lines(x.phi,
dbeta(x.phi, a.prior, b.prior),
lty=2)
legend("bottom",
legend=c("Posterior",
"Prior"),
lty=c(1, 2))
}
}
dfba_plot_beta(3, 4, 1, 1, plot.prior=TRUE)
dfba_plot_beta(3, 4, 1, 1, plot.prior=FALSE)
dfba_plot_beta(3, 4, 1, 1, plot.prior=TRUE)
dfba_plot_beta<-function(a.post, b.post, a.prior=NULL, b.prior=NULL, plot.prior=FALSE){
x.phi<-seq(0, 1, 1/1000)
y.phi<-dbeta(x.phi, a.post, b.post)
if (plot.prior==FALSE){
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Posterior Probability")
} else {
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability")
lines(x.phi,
dbeta(x.phi, a.prior, b.prior),
lty=2)
legend("upperleft",
legend=c("Posterior",
"Prior"),
lty=c(1, 2))
}
}
dfba_plot_beta(3, 4, 1, 1, plot.prior=TRUE)
legend("topleft",
legend=c("Posterior",
"Prior"),
lty=c(1, 2))
dfba_plot_beta<-function(a.post, b.post, a.prior=NULL, b.prior=NULL, plot.prior=FALSE){
x.phi<-seq(0, 1, 1/1000)
y.phi<-dbeta(x.phi, a.post, b.post)
if (plot.prior==FALSE){
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Posterior Probability")
} else {
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability")
lines(x.phi,
dbeta(x.phi, a.prior, b.prior),
lty=2)
legend("topleft",
legend=c("Posterior",
"Prior"),
lty=c(1, 2))
}
}
dfba_plot_beta<-function(a.post, b.post, a.prior=NULL, b.prior=NULL, plot.prior=FALSE){
x.phi<-seq(0, 1, 1/1000)
y.phi<-dbeta(x.phi, a.post, b.post)
if (plot.prior==FALSE){
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Posterior Probability")
} else {
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability")
lines(x.phi,
dbeta(x.phi, a.prior, b.prior),
lty=2)
legend("topleft",
legend=c("Posterior",
"Prior"),
lty=c(1, 2))
}
}
dfba_plot_beta(3, 4, 1, 1, plot.prior=TRUE)
dfba_plot_beta<-function(a.post, b.post, a.prior=NULL, b.prior=NULL, plot.prior=FALSE){
x.phi<-seq(0, 1, 1/1000)
y.phi<-dbeta(x.phi, a.post, b.post)
if (plot.prior==FALSE){
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Posterior Probability")
} else {
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability")
lines(x.phi,
dbeta(x.phi, a.prior, b.prior),
lty=2)
legend("top",
legend=c("Posterior",
"Prior"),
lty=c(1, 2))
}
}
dfba_plot_beta(3, 4, 1, 1, plot.prior=TRUE)
dfba_plot_beta<-function(a.post, b.post, a.prior=NULL, b.prior=NULL, plot.prior=FALSE){
x.phi<-seq(0, 1, 1/1000)
y.phi<-dbeta(x.phi, a.post, b.post)
if (plot.prior==FALSE){
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Posterior Probability")
} else {
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability")
lines(x.phi,
dbeta(x.phi, a.prior, b.prior),
lty=2)
legend("topright",
inset = c(-0.2, 0),
legend=c("Posterior",
"Prior"),
lty=c(1, 2))
}
}
dfba_plot_beta(3, 4, 1, 1, plot.prior=TRUE)
dfba_plot_beta(3, 4, 1, 1, plot.prior=TRUE)
dfba_plot_beta<-function(a.post, b.post, a.prior=NULL, b.prior=NULL, plot.prior=FALSE){
x.phi<-seq(0, 1, 1/1000)
y.phi<-dbeta(x.phi, a.post, b.post)
if (plot.prior==FALSE){
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Posterior Probability")
} else {
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability")
lines(x.phi,
dbeta(x.phi, a.prior, b.prior),
lty=2)
legend("topright",
inset = c(-0.2, 0),
legend=c("Posterior",
"Prior"),
lty=c(1, 2))
}
}
dfba_plot_beta(3, 4, 1, 1, plot.prior=TRUE)
dfba_plot_beta<-function(a.post, b.post, a.prior=NULL, b.prior=NULL, plot.prior=FALSE){
x.phi<-seq(0, 1, 1/1000)
y.phi<-dbeta(x.phi, a.post, b.post)
if (plot.prior==FALSE){
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Posterior Probability")
} else {
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability")
lines(x.phi,
dbeta(x.phi, a.prior, b.prior),
lty=2)
legend("topright",
inset = c(-0.4, 0),
legend=c("Posterior",
"Prior"),
lty=c(1, 2))
}
}
dfba_plot_beta(3, 4, 1, 1, plot.prior=TRUE)
dfba_plot_beta<-function(a.post, b.post, a.prior=NULL, b.prior=NULL, plot.prior=FALSE){
x.phi<-seq(0, 1, 1/1000)
y.phi<-dbeta(x.phi, a.post, b.post)
if (plot.prior==FALSE){
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Posterior Probability")
} else {
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability")
lines(x.phi,
dbeta(x.phi, a.prior, b.prior),
lty=2)
legend("topright",
inset = c(-0.3, 0),
legend=c("Posterior",
"Prior"),
lty=c(1, 2))
}
}
dfba_plot_beta(3, 4, 1, 1, plot.prior=TRUE)
dfba_plot_beta<-function(a.post, b.post, a.prior=NULL, b.prior=NULL, plot.prior=FALSE){
x.phi<-seq(0, 1, 1/1000)
y.phi<-dbeta(x.phi, a.post, b.post)
if (plot.prior==FALSE){
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Posterior Probability")
} else {
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability")
lines(x.phi,
dbeta(x.phi, a.prior, b.prior),
lty=2)
legend("right",
inset = c(-0.3, 0),
legend=c("Posterior",
"Prior"),
lty=c(1, 2))
}
}
dfba_plot_beta(3, 4, 1, 1, plot.prior=TRUE)
dfba_plot_beta(3, 4, 1, 1, plot.prior=FALSE)
plot(dfba_gamma(1:10, 5:14, quantiles_x=2, quantiles_y=2))
plot(dfba_gamma(1:10, 5:14, quantiles_x=2, quantiles_y=2), plot.prior=TRUE)
plot(dfba_gamma(1:10, 5:14, quantiles_x=2, quantiles_y=2), plot.prior=FALSE)
Vec_to_table<-function(x, y, quantiles_x, quantiles_y){
x_cut<-cut(x, quantiles_x)
y_cut<-cut(y, quantiles_y)
return(table(x_cut, y_cut))
}
setClass("dfba_gamma_out", representation("list"))
setMethod("show", "dfba_gamma_out", function(object) {
cat("Descriptive Statistics \n")
cat("========================\n")
cat(" ", "Concordant Pairs", "\t", "Discordant Pairs", "\n")
cat(" ", object$nc, "\t\t\t", object$nd, "\n")
cat(" ", "Proportion of Concordant Pairs", "\n")
cat(" ", object$sample.p, "\n")
cat("\nFrequentist Analyses\n")
cat("========================\n")
cat("  ", "Gamma value", "\t\t", "p-value", "\n")
cat("  ", object$gamma, "\t\t\t", "to be added", "\n")
cat(" ", object$hdi.width*100, "% Confidence Interval", "\n", sep="")
cat(" ", "CI to be added\n")
cat("\nBayesian Analyses\n")
cat("========================\n")
cat(" ", "Beta Shape Parameters\n")
cat(" ", "Alpha", "\t", "Beta\n")
cat(" ", object$alpha, "\t\t", object$beta, "\n")
cat(" ", "Posterior Median\n")
cat(" ", object$post.median, "\n")
cat(" ", object$hdi.width*100, "% Highest Density Interval\n", sep="")
cat(" ", "Lower Limit", "\t\t", "Upper Limit\n")
cat(" ", object$post.hdi.lower, "\t\t", object$post.hdi.upper)
})
dfba_plot_beta<-function(a.post, b.post, a.prior=NULL, b.prior=NULL, plot.prior=FALSE){
x.phi<-seq(0, 1, 1/1000)
y.phi<-dbeta(x.phi, a.post, b.post)
if (plot.prior==FALSE){
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Posterior Probability")
} else {
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plot(x.phi,
y.phi,
type="l",
xlab="Phi",
ylab="Probability")
lines(x.phi,
dbeta(x.phi, a.prior, b.prior),
lty=2)
legend("right",
inset = c(-0.3, 0),
legend=c("Posterior",
"Prior"),
lty=c(1, 2))
}
}
setMethod("plot",
signature("dfba_gamma_out"),
function(x, plot.prior=FALSE){
dfba_plot_beta(x$alpha, x$beta, x$a.prior, x$b.prior, plot.prior)
})
Table_to_vec<-function(table){
x<-rep(1:nrow(table), unname(rowSums(table)))
y<-rep(as.vector(t(col(table))), as.vector(t(table)))
list(x=x,
y=y)
}
dfba_gamma<-function(x, y=NULL, quantiles_x=NULL, quantiles_y=NULL, a.prior=1, b.prior=1, hdi.width=0.95){
if(is.matrix(x)==TRUE){
table<-x
} else {
if(length(x)!=length(y)){
stop("x and y must have equal length")
}
table<-Vec_to_table(x, y, quantiles_x, quantiles_y)
x<-Table_to_vec(table)$x
y<-Table_to_vec(table)$y
}
dfba_gamma_list<-list(gamma=dfba_phi(x, y, a.prior, b.prior, hdi.width)$tau,
a.prior=a.prior,
b.prior=b.prior,
sample.p=dfba_phi(x, y, a.prior, b.prior, hdi.width)$sample.p,
alpha=dfba_phi(x, y, a.prior, b.prior, hdi.width)$alpha,
beta=dfba_phi(x, y, a.prior, b.prior, hdi.width)$beta,
hdi.width=hdi.width,
post.median=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.median,
post.hdi.lower=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.lower,
post.hdi.upper=dfba_phi(x, y, a.prior, b.prior, hdi.width)$post.hdi.upper)
new("dfba_gamma_out", dfba_gamma_list)
}
plot(dfba_gamma(1:10, 5:14, quantiles_x=2, quantiles_y=2), plot.prior=TRUE)
